name: Deploy to Droplet

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest

    # Define environment based on branch
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
      url: ${{ github.ref == 'refs/heads/main' && 'https://your-prod-domain.com' || 'https://your-dev-domain.com' }}

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker image
      - name: Build and push Docker image
        run: |
          docker build -t myapp:${{ github.sha }} .
          docker tag myapp:${{ github.sha }} mydockerusername/myapp:${{ github.sha }}
          docker push mydockerusername/myapp:${{ github.sha }}

      # Deploy to Droplet via SSH
      - name: Deploy to Droplet
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DROPLET_IP: ${{ secrets.DROPLET_IP }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem root@$DROPLET_IP << 'EOF'
            docker pull mydockerusername/myapp:${{ github.sha }}
            docker stop myapp || true
            docker rm myapp || true
            docker run -d --name myapp -p 80:80 mydockerusername/myapp:${{ github.sha }}
          EOF
          rm private_key.pem

  # Job to handle pull request merge to main
  merge-to-main:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: deploy # Ensure deployment to development succeeds first
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Push to main (simulated merge)
        run: |
          git fetch origin develop
          git merge origin/develop --no-ff -m "Merge pull request via GitHub Actions"
          git push origin main
